@startuml CU018 - Líder registra respuesta hacia ausencia de colaborador - Diagrama de secuencia
actor Navegador
boundary "absence.routes" as Routes
boundary "absence.view" as View
control "absence.controller" as Controller
entity "absence.model" as Model
database "myPhpAdmin" as DB

autonumber

' El Navegador envía la petición AJAX para registrar la respuesta a la ausencia
activate Navegador
Navegador -> Routes: POST /absence/requests

activate Routes
Routes -> Controller: requests(request, response)
activate Controller

' El controlador invoca al modelo para actualizar la respuesta de la ausencia
Controller ->> Model: updateResponse(responseData, absenceID)
activate Model

' El modelo ejecuta la consulta en la base de datos
Model ->> DB: db.execute(\n"UPDATE absence \nSET response = ? \nWHERE absenceID = ?", \n[responseData, absenceID])
activate DB
DB -->> Model: confirmación de actualización
deactivate DB

Model -->> Controller: resultado_update
deactivate Model

' El controlador procesa el resultado y prepara la respuesta para la vista (AJAX JSON o fragmento HTML)
Controller ->> View: renderResponse(resultado_update)
activate View
View --> Controller: fragmento HTML/JSON
deactivate View

' El controlador envía la respuesta al router
Controller -->> Routes: response.json()
deactivate Controller

Routes -->> Navegador: respuesta AJAX
deactivate Routes

' El Navegador procesa la respuesta y actualiza la interfaz
Navegador -> Navegador: callback, actualiza UI
deactivate Navegador

@enduml