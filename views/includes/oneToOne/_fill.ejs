<div class="primaryContainer bgContainer1">
    
    <!-- Muestra los datos de la sesión One On One -->
    <div class="titleContainer">
        <h2 class="title text-center flex-1"><%= name %> | <%= meetingDate %></h2>
    </div>

    <% if (meetingLink) { %>
        <a target="_blank" href="<%= meetingLink %>" class="btnPrimary !block w-fit m-auto mt-5">Google Meet Link</a>
    <% } %>

    <!-- Formulario -->
    <form
        id="fillForm"
        action="/oneToOne/<%= sessionID %>/fill"
        method="POST"
        class="p-6 space-y-8"
    >
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />

        <!-- Preguntas -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

            <!-- Obtiene la cantidad de preguntas -->
            <input type="hidden" name="numQuestions" value="<%= questions.length %>" />

            <!-- Ciclo para cada pregunta -->
            <% questions.forEach((question, index) => { %>
            <div class="space-y-2">
                <label class="block text-lg font-medium text-neutral-100">
                    <%= question.question %>
                </label>

                <!-- Relaciona la respuesta con la pregunta por medio de su ID -->
                <input
                    type="hidden"
                    name="questionID<%= index + 1 %>"
                    value="<%= question.questionID %>"
                />

                <textarea
                    name="question<%= index + 1 %>"
                    rows="3"
                    class="questionInput w-full h-40 max-h-40 resize-none p-3 bg-neutral-700/50 border border-neutral-600/50 rounded-lg"
                    placeholder="Please provide your answer..."
                    required
                ></textarea>
            </div>
            <% }); %>
        </div>

        <!-- Métricas -->
        <div class="space-y-8">

            <!-- Obtiene la cantidad de preguntas -->
            <input type="hidden" name="numMeasures" value="<%= measurables.length %>" />

            <!-- Ciclo para cada pregunta -->
            <% measurables.forEach((measurable, qIndex) => { %>
            <div class="space-y-4">
                <label class="block text-lg font-medium text-neutral-100">
                    <%= measurable.summary %>
                </label>

                    <!-- Relaciona la respuesta con la métrica por medio de su ID -->
                <input
                    type="hidden"
                    name="measurableID<%= qIndex + 1 %>"
                    value="<%= measurable.measurableID %>"
                />

                <input
                    id="measureSlider<%= qIndex + 1 %>"
                    type="range"
                    name="measure<%= qIndex + 1 %>"
                    min="0"
                    max="5"
                    value="0"
                    step="1"
                    class="hidden range-input"
                    data-measurable="<%= qIndex + 1 %>"
                />

                <!-- Generación de botones -->
                <div id="measureContainer<%= qIndex + 1 %>" question="<%= qIndex %>" class="w-[90%] h-7 m-auto flex flex-row gap-5 place-content-between">
                    <% for(let i=0; i<5; i++) { %>
                        <!-- La clase value es necesaria para JS, no modificar -->
                        <p class="value<%= i+1 %> btnMeasure h-full flex-1"></p>
                    <% } %>
                </div>

            </div>
            <% }); %>
        </div>

        <!-- Botón para enviar -->
        <div class="flex justify-end pt-6">
            <button
                type="submit"
                class="btnPrimary"
            >
                Submit
            </button>
        </div>
    </form>
</div>

<script>
    const form = document.getElementById("fillForm");
    const answers = document.querySelectorAll(".questionInput");
    const measureButtons = document.querySelectorAll(".btnMeasure");

    // Verifica que en los textarea haya algo de texto (letras)
    form.addEventListener("submit", function(event) {
        event.preventDefault();

        let validAnswer = answers.length;

        // Ciclo para iterar para cada respuesta
        answers.forEach((answer) => {
            // Obtiene un arreglo de los caracteres de la respuesta
            characters = answer.value.split('');
            for (let i = 0; i < characters.length; i++) {
                // Verifica que el caracter sea una letra
                if ((characters[i] >= 'a' && characters[i] <= 'z')
                || (characters[i] >= 'A' && characters[i] <= 'Z')) {
                    validAnswer--;
                    break;
                } 
            }
        });

        if (validAnswer == 0) {
            this.submit();
        } else {
            showStatus("Alert", "You need to add text to ALL the answer fields.")
        }
    });

    // Limpia los botones a su estado base
    const cleanButtons = (question) => {
        // Obtiene el valor actual para usar como límite
        const buttonLimit = document.getElementById(`measureSlider${question}`);

        // Resetea todos los botones
        for (let i=1; i<=5; i++) {
            let button = document.querySelector(`#measureContainer${question} .value${i}`);
            button.classList.remove("bgPrimary");
            button.classList.remove("bgPrimaryLowOpacity");
        }
    }

    // Pinta los botones seleccionados
    const clickButtons = (question) => {
        // Limpia los botones a su estado base
        cleanButtons(question);

        // Obtiene el valor actual para usar como límite
        const buttonLimit = document.getElementById(`measureSlider${question}`);

        // Solo pinta los botones hasta el selecionado
        for (let i=1; i<=buttonLimit.value; i++) {
            const button = document.querySelector(`#measureContainer${question} .value${i}`);
            button.classList.add("bgPrimary");
        }
    }

    // Pinta los botones seleccionados
    const hoverButtons = (question, value) => {
        // Limpia los botones a su estado base
        cleanButtons(question);

        // Solo pinta los botones hasta el selecionado
        for (let i=1; i<=value; i++) {
            const button = document.querySelector(`#measureContainer${question} .value${i}`);
            button.classList.add("bgPrimaryLowOpacity");
        }
    }

    // Funcionalidades en botones de métricas
    measureButtons.forEach((measureButton) => {
        const question = measureButton.parentElement.id.split("measureContainer")[1];
        const measure = document.getElementById(`measureSlider${question}`);
        let value = measureButton.classList[0].split("value")[1];

        // Al clickear pinta los antecesores del botón
        measureButton.addEventListener("click", () =>{
            // En caso de presionar el botón con el valor actual, lo resetea a 0
            measure.value = measure.value == value ? '0' : value;
            clickButtons(question);
        });

        // Al hacer hover pinta los antecesores del botón
        measureButton.addEventListener("mouseenter", () =>{
            hoverButtons(question, value);
        });

        // Al salir del hover limpia los antecesores del botón
        measureButton.addEventListener("mouseleave", () =>{
            clickButtons(question);
        });


    });

    // Al cargar la página pinta los botones
    for (let i=1; i<=5; i++){
        clickButtons(i);
    }

    
</script>
