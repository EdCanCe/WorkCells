<div class="container mx-auto p-6 max-w-4xl">
    <div class="bg-neutral-700/25 shadow-lg rounded-lg overflow-hidden">
        <h2 class="text-2xl font-semibold text-center">One On One</h2>

        <h3 class="text-2xl font-semibold text-center">
            <%= name %> | <%= meetingDate %>
        </h3>

        <% if (info && info !== '') { %>
        <div class="bg-green-100 text-green-800 p-4 rounded-lg mx-6 mt-6">
            <%= info %>
        </div>
        <% } %>

        <!-- TODO: Añadir botón para abrir meet en caso de que el dato no sea nulo -->

        <!-- Formulario -->
        <form
            id="fillForm"
            action="/oneToOne/<%= sessionID %>/fill"
            method="POST"
            class="p-6 space-y-8"
        >
            <input type="hidden" name="_csrf" value="<%= csrfToken %>" />

            <!-- Preguntas -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

                <!-- Obtiene la cantidad de preguntas -->
                <input type="hidden" name="numQuestions" value="<%= questions.length %>" />

                <!-- Ciclo para cada pregunta -->
                <% questions.forEach((question, index) => { %>
                <div class="space-y-2">
                    <label class="block text-lg font-medium text-neutral-100">
                        <%= question.question %>
                    </label>

                    <!-- Relaciona la respuesta con la pregunta por medio de su ID -->
                    <input
                        type="hidden"
                        name="question_id_<%= index + 1 %>"
                        value="<%= question.questionID %>"
                    />

                    <textarea
                        name="question_<%= index + 1 %>"
                        rows="3"
                        class="questionInput w-full h-40 max-h-40 resize-none p-3 bg-neutral-700/50 border border-neutral-600/50 rounded-lg"
                        placeholder="Please provide your answer..."
                        required
                    ></textarea>
                </div>
                <% }); %>
            </div>

            <!-- Métricas -->
            <div class="space-y-8">

                <!-- TODO: Modificar el css y js de los botones -->

                <!-- Obtiene la cantidad de preguntas -->
                <input type="hidden" name="numMeasures" value="<%= measurables.length %>" />

                <!-- Ciclo para cada pregunta -->
                <% measurables.forEach((measurable, qIndex) => { %>
                <div class="space-y-4">
                    <label class="block text-lg font-medium text-neutral-100">
                        <%= measurable.summary %>
                    </label>

                     <!-- Relaciona la respuesta con la métrica por medio de su ID -->
                    <input
                        type="hidden"
                        name="measurable_id_<%= qIndex + 1 %>"
                        value="<%= measurable.measurableID %>"
                    />

                    <input
                        type="range"
                        name="measure_<%= qIndex + 1 %>"
                        min="1"
                        max="5"
                        value="3"
                        step="1"
                        class="hidden range-input"
                        data-measurable="<%= qIndex + 1 %>"
                    />

                    <div
                        class="flex items-center gap-1 rating-buttons"
                        data-measurable="<%= qIndex + 1 %>"
                    >
                        <!-- Genera los 5 botones para la métrica -->
                        <% for (let i = 1; i <= 5; i++) { %>
                        <div
                            class="flex-1 h-10 bg-neutral-700/50 rounded-md cursor-pointer rating-button border border-blue-300 <%= i <= 3 ? 'bg-blue-500 border-blue-600' : '' %>"
                            data-value="<%= i %>"
                            onclick="updateRating(this)"
                            onmouseover="previewRating(this)"
                            onmouseout="resetPreview(this)"
                            title="Rating <%= i %>"
                        ></div>
                        <% } %>
                    </div>
                </div>
                <% }); %>
            </div>

            <!-- Botón para enviar -->
            <div class="flex justify-end pt-6">
                <button
                    type="submit"
                    class="btnPrimary"
                >
                    Submit One To One
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    const form = document.getElementById("fillForm");
    const answers = document.querySelectorAll(".questionInput");

    // Verifica que en los textarea haya algo de texto (letras)
    form.addEventListener("submit", function(event) {
        event.preventDefault();

        let validAnswer = answers.length;

        // Ciclo para iterar para cada respuesta
        answers.forEach((answer) => {
            // Obtiene un arreglo de los caracteres de la respuesta
            characters = answer.value.split('');
            for (let i = 0; i < characters.length; i++) {
                // Verifica que el caracter sea una letra
                if ((characters[i] >= 'a' && characters[i] <= 'z')
                || (characters[i] >= 'A' && characters[i] <= 'Z')) {
                    validAnswer--;
                    break;
                } 
            }
        });

        if (validAnswer == 0) {
            this.submit();
        } else {
            showStatus("Alert", "You need to add text to ALL the answer fields.")
        }
    });

    // Store original states
    const originalStates = new Map();

    function previewRating(button) {
        const container = button.closest(".rating-buttons");
        const value = parseInt(button.getAttribute("data-value"));
        const buttons = container.querySelectorAll(".rating-button");

        // Save original states if not already saved
        if (!originalStates.has(container)) {
            const states = Array.from(buttons).map((btn) => ({
                element: btn,
                classes: [...btn.classList],
            }));
            originalStates.set(container, states);
        }

        // Preview selection
        buttons.forEach((btn) => {
            const btnValue = parseInt(btn.getAttribute("data-value"));
            if (btnValue <= value) {
                btn.classList.add("bg-blue-400", "border-blue-500");
                btn.classList.remove("bg-neutral-700/50");
            }
        });
    }

    function resetPreview(button) {
        const container = button.closest(".rating-buttons");
        const savedStates = originalStates.get(container);

        if (savedStates) {
            savedStates.forEach((state) => {
                state.element.className = ""; // Clear all classes
                state.classes.forEach((c) => state.element.classList.add(c)); // Restore original
            });
        }
    }

    function updateRating(button) {
        const container = button.closest(".rating-buttons");
        const value = parseInt(button.getAttribute("data-value"));
        const measurableIndex = container.getAttribute("data-measurable");
        const rangeInput = document.querySelector(
            `.range-input[data-measurable="${measurableIndex}"]`
        );

        // Update hidden range input
        rangeInput.value = value;

        // Update button styles permanently
        const buttons = container.querySelectorAll(".rating-button");
        buttons.forEach((btn) => {
            const btnValue = parseInt(btn.getAttribute("data-value"));
            btn.classList.remove(
                "bg-neutral-700/50",
                "bg-blue-400",
                "bg-blue-500"
            );

            if (btnValue <= value) {
                btn.classList.add("bg-blue-500", "border-blue-600");
            } else {
                btn.classList.add("bg-neutral-700/50");
            }
        });

        // Update original states
        const states = Array.from(buttons).map((btn) => ({
            element: btn,
            classes: [...btn.classList],
        }));
        originalStates.set(container, states);
    }

    // Initialize with default value (3)
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".range-input").forEach((input) => {
            const measurableIndex = input.getAttribute("data-measurable");
            const container = document.querySelector(
                `.rating-buttons[data-measurable="${measurableIndex}"]`
            );
            const buttons = container.querySelectorAll(".rating-button");

            buttons.forEach((btn) => {
                const btnValue = parseInt(btn.getAttribute("data-value"));
                if (btnValue <= 3) {
                    btn.classList.add("bg-blue-500", "border-blue-600");
                    btn.classList.remove("bg-neutral-700/50");
                }
            });

            // Save initial state
            const states = Array.from(buttons).map((btn) => ({
                element: btn,
                classes: [...btn.classList],
            }));
            originalStates.set(container, states);
        });
    });
</script>
