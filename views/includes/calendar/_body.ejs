<div id="realArea" class="fullContainer flex flex-col max-h-[calc(100vh-60px)] !overflow-hidden">

    <meta name="current-date" content="<%= today %>" />
    <meta name="typeOfRender" content="<%= isMonthView %>" />

    <!-- Controles de navegación y selector de vista -->
    <div class="flex justify-between items-center mb-4">
        <!-- Controles de navegación -->
        <div class="flex items-center gap-2">
            <button
                onclick="navigateCalendar('prev')"
                class="btnPrimary"
            >
                <svg
                    class="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 19l-7-7 7-7"
                    ></path>
                </svg>
            </button>

            <button
                onclick="navigateCalendar('today')"
                class="btnPrimary"
            >
                Today
            </button>

            <button
                onclick="navigateCalendar('next')"
                class="btnPrimary"
            >
                <svg
                    class="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"
                    ></path>
                </svg>
            </button>

            <span id="dateTitle" class="ml-2 font-medium text-lg"> </span>
        </div>

        <!-- Selector de vista y filtros -->
        <div class="flex gap-2">
            <!-- New Filter Dropdown -->
            <div class="relative">
                <button
                    id="filterButton"
                    class="btnPrimary !flex items-center gap-1"
                >
                    <svg
                        class="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
                        ></path>
                    </svg>
                    Filter
                </button>
                <div
                    id="filterDropdown"
                    class="hidden absolute right-0 mt-2 w-48 bg-neutral-800 rounded-md shadow-lg z-10"
                >
                    <div class="p-2">
                        <label
                            class="flex items-center px-2 py-1 text-sm text-neutral-100 hover:bg-neutral-700 rounded cursor-pointer"
                        >
                            <input
                                type="checkbox"
                                class="form-checkbox rounded text-blue-500"
                                data-type="vacation"
                                checked
                            />
                            <span class="ml-2">Vacations</span>
                        </label>
                        <label
                            class="flex items-center px-2 py-1 text-sm text-neutral-100 hover:bg-neutral-700 rounded cursor-pointer"
                        >
                            <input
                                type="checkbox"
                                class="form-checkbox rounded text-red-500"
                                data-type="absence"
                                checked
                            />
                            <span class="ml-2">Absences</span>
                        </label>
                        <label
                            class="flex items-center px-2 py-1 text-sm text-neutral-100 hover:bg-neutral-700 rounded cursor-pointer"
                        >
                            <input
                                type="checkbox"
                                class="form-checkbox rounded text-green-500"
                                data-type="holiday"
                                checked
                            />
                            <span class="ml-2">Holidays</span>
                        </label>
                        <label
                            class="flex items-center px-2 py-1 text-sm text-neutral-100 hover:bg-neutral-700 rounded cursor-pointer"
                        >
                            <input
                                type="checkbox"
                                class="form-checkbox rounded text-purple-500"
                                data-type="oneToOne"
                                checked
                            />
                            <span class="ml-2">One To One</span>
                        </label>
                    </div>
                </div>
            </div>

            <button
                onclick="setViewPreference(false)"
                class="btnPrimary"
            >
                View by Week
            </button>
            <button
                onclick="setViewPreference(true)"
                class="btnPrimary"
            >
                View by Month
            </button>
        </div>
    </div>

    <!-- Encabezados de días -->
    <div class="grid grid-cols-7 mb-2">
        <% weekDays.forEach(day => { %>
            <div class="text-center font-bold m-[2px] py-2 bg-neutral-700/50 rounded">
                <%= day %>
            </div>
            <% }); %>
    </div>
    
    <!-- Días del calendario -->
    <div id="calendarContainer" class="flex-1 mb-6 grid grid-cols-7 auto-rows-fr">
        <p class="w-full h-full col-span-7 row-span-1 text-center glowing">Fetching the data...</p>
    </div>
</div>

<script src="/javascript/mexicoDate.js"></script>
<script>
    const currentDate = document.querySelector('[name="current-date"]');
    const typeOfRender = document.querySelector('[name="typeOfRender"]');
    const calendarContainer = document.getElementById("calendarContainer");
    const dateTitle = document.getElementById("dateTitle");
    const realAreaContainer = document.getElementById("realArea");
    const element = getComputedStyle(realAreaContainer);
    let paddings;
    let maxHeight;

    const resetHeights = () => {
        paddings = parseFloat(element.paddingBottom) + parseFloat(element.paddingTop);
        maxHeight = realAreaContainer.clientHeight - paddings - 15;
    } 

    const setCalendarArea = () => {
        const isMonthView = typeOfRender.content !== "true";

        const childs = Array.from(calendarContainer.children);
        const extraPx = parseFloat(getComputedStyle(childs[0]).marginBottom) + parseFloat(getComputedStyle(childs[0]).marginTop) + parseFloat(getComputedStyle(childs[0]).paddingBottom) + parseFloat(getComputedStyle(childs[0]).paddingTop);
        const usedHeight = (maxHeight - paddings) / (isMonthView ? 1 : 5) - extraPx - (isMonthView ? 30 : 0);

        console.log(usedHeight);

        childs.forEach((child) => {
            child.style.height = `${usedHeight}px`;
            child.style.maxHeight = `${usedHeight}px`;
        });
    }

    const loadFilters = () => {
        const checkboxes = document.querySelectorAll(
            '#filterDropdown input[type="checkbox"]'
        );

        checkboxes.forEach((checkbox) => {
            const eventType = checkbox.dataset.type;
            const eventElements = document.querySelectorAll(
                `.${eventType}-event`
            );

            if (checkbox.checked) {
                eventElements.forEach((el) => el.classList.remove("hidden"));
            } else {
                eventElements.forEach((el) => el.classList.add("hidden"));
            }
        });
    };
    
    const formatTime = (date) => {
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }

    const formatDateForSQL = (date) => {
        return date.toISOString().split("T")[0];
    };
    
    const fetchByDate = (usedDate, role) => {
        const todayDate = formatDateForSQL(mexicoDate());
        const isMonthView = typeOfRender.content === "true";

        const createDay = (day) => {
            return `
            <div class="
                ${formatDateForSQL(new Date(day.date)) === todayDate ? "bgPrimary" : "bg-neutral-500/20"}
                ${day.isOutside ? "opacity-30" : ""}
                m-[2px] p-1 overflow-auto rounded border border-neutral-600/50
            ">
            
            <div class="text-right font-medium mb-1">${day.dayNumber}</div>

                ${day.events.vacations.map((vacation) => 
                    `<a
                        href="/vacation/check/${vacation.vacationID}"
                        class="
                            ${vacation.isStart ? "rounded-l-lg border-l-4 border-blue-700" : ""}
                            ${vacation.isEnd ? "rounded-r-lg border-r-4 border-blue-700" : ""}
                            vacation-event block w-full text-xs mb-1 p-1 rounded text-white bg-blue-500
                    ">
                        Vacation
                    </a>`).join("")}

                ${day.events.absences.map((absence) => 
                    `<a
                        href="/absence/${absence.absenceID}"
                        class="
                            absence-event block w-full text-xs mb-1 p-1 rounded text-white bg-red-500
                            ${absence.isStart ? "rounded-l-lg border-l-4 border-red-700" : ""}
                            ${absence.isEnd ? "rounded-r-lg border-r-4 border-red-700" : ""}
                    ">
                        Absence
                    </a>`).join("")}

                ${day.events.holidays.map((holiday) =>
                    `<p
                        class="holiday-event block w-full text-xs mb-1 p-1 rounded text-white bg-green-500"
                    >
                        ${holiday.title || "Feriado"}
                    </p>`).join("")}

                ${day.events.oneToOnes.map((oneToOne) =>
                    `<a
                        href="/oneToOne/${oneToOne.oneOnOneID}"
                        class="oneToOne-event block w-full text-xs mb-1 p-1 rounded text-white bg-purple-500"
                    >
                        One To One ${role === 'Human Resources' ? ` ${formatTime(new Date(oneToOne.meetingDate))} | ${oneToOne.birthName}` : ''}
                    </a>`).join("")}
            </div>
            `;
        };

        // Obtiene los datos al moverse en el calendario
        fetch(`/calendar/${usedDate}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then((result) => {
                return result.json();
            })
            .then((data) => {
                // Limpia el calendario
                calendarContainer.innerHTML = "";

                // Crea los días en el HTML
                data.days.forEach((day) => {
                    calendarContainer.innerHTML =
                        calendarContainer.innerHTML + createDay(day);
                });

                // Le asigna el tamaño a los elementos
                setCalendarArea();

                // Cambia el título correspondiente a las fechas
                dateTitle.innerHTML = isMonthView
                    ? data.formattedMonth
                    : data.formattedStart + " - " + data.formattedEnd;

                currentDate.setAttribute("content", usedDate);

                // Carga los filtros que el usuario tenía al activarlo
                loadFilters();
            })
            .catch((err) => {
                console.log(err);
            });
    };


    // Función para establecer la preferencia de vista (mes o lista)
    function setViewPreference(isMonthView) {
        document.cookie = `isMonthView=${isMonthView ? "1" : "0"}; max-age=${
            30 * 24 * 60 * 60
        }; path=/`;
        const thisDate = new Date(currentDate.content);
        if (isMonthView) {
            typeOfRender.setAttribute("content", "true");
            fetchByDate(new Date(thisDate.getFullYear(), thisDate.getMonth()), '<%= role %>');
        } else {
            typeOfRender.setAttribute("content", "false");
            fetchByDate(thisDate, '<%= role %>');
        }
    }

    function navigateCalendar(navigation) {
        // Convertir el valor de la cookie a booleano
        const isMonthView = typeOfRender.content === "true";
        const thisDate = new Date(currentDate.content);
        console.log(currentDate.content);

        console.log(isMonthView);

        if (navigation === "prev") {
            if (isMonthView) {
                thisDate.setMonth(thisDate.getMonth() - 1, 1);
            } else {
                // Week view: retrocede 7 días
                thisDate.setDate(thisDate.getDate() - 7);
            }
        } else if (navigation === "today") {
            thisDate.setTime(Date.now());
        } else if (navigation === "next") {
            if (isMonthView) {
                thisDate.setMonth(thisDate.getMonth() + 1, 1);
            } else {
                // Week view: avanza 7 días
                thisDate.setDate(thisDate.getDate() + 7);
            }
        }

        fetchByDate(thisDate, '<%= role %>');
    }

    document.addEventListener("DOMContentLoaded", function () {
        const filterButton = document.getElementById("filterButton");
        const filterDropdown = document.getElementById("filterDropdown");
        const checkboxes = document.querySelectorAll(
            '#filterDropdown input[type="checkbox"]'
        );

        filterButton.addEventListener("click", function (e) {
            e.stopPropagation();
            filterDropdown.classList.toggle("hidden");
        });

        checkboxes.forEach((checkbox) => {
            checkbox.addEventListener("change", loadFilters);
        });
    });

    window.addEventListener("resize", () => {
        resetHeights();
        setCalendarArea();
    })

    resetHeights();
    fetchByDate(formatDateForSQL(new Date), '<%= role %>');
</script>
